AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Multi-tenant API with JWT authentication and DynamoDB
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
    - dev
    - staging
    - prod
Globals:
  Function:
    Runtime: python3.13
    Timeout: 30
    Environment:
      Variables:
        ENVIRONMENT:
          Ref: Environment
        JWT_SECRET_NAME:
          Fn::Sub: ${AWS::StackName}-jwt-secret
Resources:
  ApiKeysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-api-keys
      AttributeDefinitions:
      - AttributeName: api_key_hash
        AttributeType: S
      KeySchema:
      - AttributeName: api_key_hash
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  CustomerDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-customer-data
      AttributeDefinitions:
      - AttributeName: customer_id
        AttributeType: S
      - AttributeName: data_id
        AttributeType: S
      KeySchema:
      - AttributeName: customer_id
        KeyType: HASH
      - AttributeName: data_id
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  JWTSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-jwt-secret
      Description: JWT signing secret
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: secret
        PasswordLength: 64
        ExcludeCharacters: '"@/\'
  AdminApiKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-admin-api-key
      Description: Admin API key for admin endpoints
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: admin_api_key
        PasswordLength: 32
        RequireEachIncludedType: false
        IncludeSpace: false
        ExcludeCharacters: '"@/\~`!#$%^&*()_+-={}[]|:;<>?,./'
  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-auth
      CodeUri: AuthFunction
      Handler: app.lambda_handler
      Environment:
        Variables:
          API_KEYS_TABLE:
            Ref: ApiKeysTable
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: ApiKeysTable
      - Statement:
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
            Ref: JWTSecret
      Events:
        AuthApi:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /auth
            Method: post
    Metadata:
      SamResourceId: AuthFunction
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-authorizer
      CodeUri: AuthorizerFunction
      Handler: app.lambda_handler
      Policies:
      - Statement:
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
            Ref: JWTSecret
    Metadata:
      SamResourceId: AuthorizerFunction
  DataApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-data-api
      CodeUri: DataApiFunction
      Handler: app.lambda_handler
      Environment:
        Variables:
          CUSTOMER_DATA_TABLE:
            Ref: CustomerDataTable
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CustomerDataTable
      Events:
        GetData:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /data
            Method: get
            Auth:
              Authorizer: CustomAuthorizer
    Metadata:
      SamResourceId: DataApiFunction
  KeyManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-key-manager
      CodeUri: KeyManagerFunction
      Handler: app.lambda_handler
      Environment:
        Variables:
          API_KEYS_TABLE:
            Ref: ApiKeysTable
          ADMIN_API_KEY_SECRET:
            Ref: AdminApiKeySecret
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ApiKeysTable
      - Statement:
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
            Ref: AdminApiKeySecret
      Events:
        CreateKey:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /admin/keys
            Method: post
        RevokeKey:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /admin/keys/{keyId}
            Method: delete
    Metadata:
      SamResourceId: KeyManagerFunction
  AdminDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-admin-data
      CodeUri: AdminDataFunction
      Handler: app.lambda_handler
      Environment:
        Variables:
          CUSTOMER_DATA_TABLE:
            Ref: CustomerDataTable
          ADMIN_API_KEY_SECRET:
            Ref: AdminApiKeySecret
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: CustomerDataTable
      - Statement:
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource:
            Ref: AdminApiKeySecret
      Events:
        UpsertData:
          Type: Api
          Properties:
            RestApiId:
              Ref: ApiGateway
            Path: /admin/upsert
            Method: put
    Metadata:
      SamResourceId: AdminDataFunction
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api
      StageName:
        Ref: Environment
      Auth:
        Authorizers:
          CustomAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - AuthorizerFunction
              - Arn
            Identity:
              Headers:
              - Authorization
      Cors:
        AllowMethods: '''GET,POST,PUT,DELETE,OPTIONS'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
        AllowOrigin: '''*'''
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value:
      Fn::Sub: https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-api-url
  ApiKeysTableName:
    Description: API Keys table name
    Value:
      Ref: ApiKeysTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-api-keys-table
  CustomerDataTableName:
    Description: Customer data table name
    Value:
      Ref: CustomerDataTable
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-customer-data-table
  AdminApiKey:
    Description: Admin API key for admin endpoints
    Value:
      Fn::Sub: '{{resolve:secretsmanager:${AdminApiKeySecret}:SecretString:admin_api_key}}'
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-admin-api-key
